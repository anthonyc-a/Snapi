import React, { useState } from "react";
import { Cross as Hamburger } from "hamburger-react";

import "./Header.css";

const Header = ({ active }: any) => {
  const [showNavLinks, setShowNavLinks] = useState(false);

  const toggleNavLinks = () => {
    setShowNavLinks(!showNavLinks);
  };

  return (
    <header className="header">
      <div className="header-left">
        <div className="header-button-container">
          <button className="wide-button">Publishers</button>
          <div className="small-button-container">
            <button className="small-button">
              <svg
                width="21"
                height="25"
                viewBox="0 0 21 25"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M13.7617 3.98692C12.879 5.03146 11.4666 5.85532 10.0543 5.73763C9.87775 4.32529 10.5692 2.82468 11.3784 1.89783C12.2611 0.823864 13.8058 0.0588475 15.0563 0C15.2034 1.47119 14.6297 2.91295 13.7617 3.98692ZM15.0416 6.01715C12.9967 5.89946 11.246 7.17939 10.275 7.17939C9.28927 7.17939 7.80337 6.076 6.18507 6.10542C4.08127 6.13485 2.12459 7.32651 1.05063 9.22434C-1.15615 13.02 0.476863 18.6399 2.61008 21.7294C3.65463 23.2595 4.90513 24.9366 6.55286 24.8778C8.11232 24.8189 8.73022 23.8626 10.6133 23.8626C12.5112 23.8626 13.0555 24.8778 14.7032 24.8483C16.4098 24.8189 17.4838 23.3183 18.5283 21.7883C19.72 20.0523 20.2055 18.3604 20.2349 18.2721C20.2055 18.2427 16.9394 16.9922 16.91 13.226C16.8806 10.0776 19.4846 8.57702 19.6023 8.48875C18.1311 6.31139 15.8361 6.076 15.0416 6.01715Z"
                  fill="#344774"
                />
              </svg>
            </button>
            <button className="small-button">
              <svg
                width="26"
                height="26"
                viewBox="0 0 26 26"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M21.3113 9.32959H21.3108C20.5591 9.32959 19.9502 9.93845 19.9502 10.6902V16.91C19.9502 17.6612 20.5591 18.2701 21.3108 18.2701C22.062 18.2696 22.6709 17.6607 22.6709 16.909V10.6892C22.6709 9.93748 22.0615 9.32861 21.3103 9.32861L21.3113 9.32959Z"
                  fill="#344774"
                />
                <path
                  d="M3.81801 9.33007H3.81752C3.0658 9.33007 2.45694 9.93894 2.45694 10.6907V16.9105C2.45694 17.6617 3.0658 18.2706 3.81752 18.2706C4.56876 18.2701 5.17762 17.6612 5.17762 16.9095V10.6897C5.17762 9.93796 4.56828 9.3291 3.81704 9.3291L3.81801 9.33007Z"
                  fill="#344774"
                />
                <path
                  d="M6.15045 9.32963V18.6594C6.15045 19.518 6.84629 20.2138 7.70541 20.2138H8.67725V23.5181C8.67725 24.2693 9.28612 24.8782 10.0378 24.8782C10.7891 24.8777 11.3979 24.2689 11.3979 23.5171V20.2128H13.7304V23.5171C13.7304 24.2684 14.3392 24.8772 15.091 24.8772C15.8422 24.8767 16.4511 24.2679 16.4511 23.5162V20.2119H17.4229L17.4224 20.2118C18.281 20.2118 18.9774 19.5155 18.9774 18.6569V9.32715L6.15045 9.32963Z"
                  fill="#344774"
                />
                <path
                  d="M18.7952 7.38581C18.3957 5.96254 17.4443 4.74676 16.1605 3.94693C16.0886 3.90223 16.0157 3.8585 15.9418 3.81671C15.868 3.77443 15.7936 3.73313 15.7193 3.6928L15.9661 3.25158L16.7382 1.85892V1.85844C16.7927 1.75931 16.7572 1.63491 16.6585 1.58C16.6581 1.57952 16.6581 1.57952 16.6576 1.57952C16.6274 1.56251 16.5944 1.55376 16.5604 1.55328L16.5599 1.55323C16.4851 1.55274 16.4166 1.59307 16.3806 1.65867L15.5983 3.07028L15.3514 3.5149C15.2737 3.4804 15.1949 3.44784 15.1153 3.41771C15.0356 3.38759 14.9559 3.356 14.8747 3.32733L14.8742 3.32685C13.38 2.80108 11.7517 2.80108 10.258 3.32685C10.1768 3.35552 10.0966 3.38564 10.0174 3.41723C9.93774 3.4493 9.85902 3.48186 9.78128 3.51441L9.53443 3.06979L8.75209 1.66062L8.7516 1.66013C8.69426 1.56197 8.56841 1.52942 8.47074 1.58676C8.37599 1.64167 8.34197 1.76169 8.39251 1.85839L9.16075 3.24813L9.4076 3.68935C9.3318 3.72871 9.25745 3.76952 9.18408 3.81131C9.11021 3.8531 9.03781 3.89683 8.96638 3.94348C7.68354 4.74331 6.73113 5.95909 6.33268 7.38091H6.33219C6.22189 7.75993 6.16115 8.15206 6.15143 8.54712H18.973L18.9725 8.54664C18.9623 8.15207 18.9016 7.76041 18.7913 7.38139L18.7952 7.38581ZM9.6491 6.60834L9.64862 6.60829C9.32645 6.6078 9.06551 6.34686 9.06551 6.02518C9.06551 5.70301 9.32645 5.44207 9.64862 5.44207C9.9703 5.44207 10.2317 5.70301 10.2317 6.02518V6.02469C10.2317 6.34637 9.9703 6.6078 9.64862 6.6078L9.6491 6.60834ZM15.4802 6.60834L15.4797 6.60829C15.1575 6.6078 14.8966 6.34686 14.8966 6.02518C14.8966 5.70301 15.1575 5.44207 15.4797 5.44207C15.8014 5.44207 16.0628 5.70301 16.0628 6.02518V6.02469C16.0628 6.34637 15.8014 6.6078 15.4797 6.6078L15.4802 6.60834Z"
                  fill="#344774"
                />
              </svg>
            </button>
          </div>
        </div>
      </div>
      <h1 className="logo">Snapi</h1>
      <nav className={`nav-links ${showNavLinks ? "show" : ""}`}>
        <a
          href="#Two"
          className={active < 4 ? "nav-link active" : "nav-link"}
          onClick={() => {
            setShowNavLinks(false);
          }}
        >
          How it works
        </a>
        <a
          href="#Five"
          className={active > 3 ? "nav-link active" : "nav-link"}
          onClick={() => {
            setShowNavLinks(false);
          }}
        >
          Why Use Snapi
        </a>
        <a href="#Four" className="nav-link inactive">
          Get Started
        </a>
      </nav>
      {showNavLinks && (
        <div
          onClick={() => {
            setShowNavLinks(false);
          }}
          className="nav-bg"
        ></div>
      )}
      <button className="hamburger-menu" onClick={toggleNavLinks}>
        <span></span>
        <span></span>
        <span></span>
      </button>
    </header>
  );
};

export default Header;
